#include "cafe/constants.hpp"

namespace cafe {

std::string opcode_name(int16_t opcode) {
  switch (opcode) {
    case op::aaload:
      return "aaload";
    case op::aastore:
      return "aastore";
    case op::aconst_null:
      return "aconst_null";
    case op::aload:
      return "aload";
    case op::aload_0:
      return "aload_0";
    case op::aload_1:
      return "aload_1";
    case op::aload_2:
      return "aload_2";
    case op::aload_3:
      return "aload_3";
    case op::anewarray:
      return "anewarray";
    case op::areturn:
      return "areturn";
    case op::arraylength:
      return "arraylength";
    case op::astore:
      return "astore";
    case op::astore_0:
      return "astore_0";
    case op::astore_1:
      return "astore_1";
    case op::astore_2:
      return "astore_2";
    case op::astore_3:
      return "astore_3";
    case op::athrow:
      return "athrow";
    case op::baload:
      return "baload";
    case op::bastore:
      return "bastore";
    case op::bipush:
      return "bipush";
    case op::caload:
      return "caload";
    case op::castore:
      return "castore";
    case op::checkcast:
      return "checkcast";
    case op::d2f:
      return "d2f";
    case op::d2i:
      return "d2i";
    case op::d2l:
      return "d2l";
    case op::dadd:
      return "dadd";
    case op::daload:
      return "daload";
    case op::dastore:
      return "dastore";
    case op::dcmpg:
      return "dcmpg";
    case op::dcmpl:
      return "dcmpl";
    case op::dconst_0:
      return "dconst_0";
    case op::dconst_1:
      return "dconst_1";
    case op::ddiv:
      return "ddiv";
    case op::dload:
      return "dload";
    case op::dload_0:
      return "dload_0";
    case op::dload_1:
      return "dload_1";
    case op::dload_2:
      return "dload_2";
    case op::dload_3:
      return "dload_3";
    case op::dmul:
      return "dmul";
    case op::dneg:
      return "dneg";
    case op::drem:
      return "drem";
    case op::dreturn:
      return "dreturn";
    case op::dstore:
      return "dstore";
    case op::dstore_0:
      return "dstore_0";
    case op::dstore_1:
      return "dstore_1";
    case op::dstore_2:
      return "dstore_2";
    case op::dstore_3:
      return "dstore_3";
    case op::dsub:
      return "dsub";
    case op::dup:
      return "dup";
    case op::dup_x1:
      return "dup_x1";
    case op::dup_x2:
      return "dup_x2";
    case op::dup2:
      return "dup2";
    case op::dup2_x1:
      return "dup2_x1";
    case op::dup2_x2:
      return "dup2_x2";
    case op::f2d:
      return "f2d";
    case op::f2i:
      return "f2i";
    case op::f2l:
      return "f2l";
    case op::fadd:
      return "fadd";
    case op::faload:
      return "faload";
    case op::fastore:
      return "fastore";
    case op::fcmpg:
      return "fcmpg";
    case op::fcmpl:
      return "fcmpl";
    case op::fconst_0:
      return "fconst_0";
    case op::fconst_1:
      return "fconst_1";
    case op::fconst_2:
      return "fconst_2";
    case op::fdiv:
      return "fdiv";
    case op::fload:
      return "fload";
    case op::fload_0:
      return "fload_0";
    case op::fload_1:
      return "fload_1";
    case op::fload_2:
      return "fload_2";
    case op::fload_3:
      return "fload_3";
    case op::fmul:
      return "fmul";
    case op::fneg:
      return "fneg";
    case op::frem:
      return "frem";
    case op::freturn:
      return "freturn";
    case op::fstore:
      return "fstore";
    case op::fstore_0:
      return "fstore_0";
    case op::fstore_1:
      return "fstore_1";
    case op::fstore_2:
      return "fstore_2";
    case op::fstore_3:
      return "fstore_3";
    case op::fsub:
      return "fsub";
    case op::getfield:
      return "getfield";
    case op::getstatic:
      return "getstatic";
    case op::goto_:
      return "goto";
    case op::goto_w:
      return "goto_w";
    case op::i2b:
      return "i2b";
    case op::i2c:
      return "i2c";
    case op::i2d:
      return "i2d";
    case op::i2f:
      return "i2f";
    case op::i2l:
      return "i2l";
    case op::i2s:
      return "i2s";
    case op::iadd:
      return "iadd";
    case op::iaload:
      return "iaload";
    case op::iand:
      return "iand";
    case op::iastore:
      return "iastore";
    case op::iconst_m1:
      return "iconst_m1";
    case op::iconst_0:
      return "iconst_0";
    case op::iconst_1:
      return "iconst_1";
    case op::iconst_2:
      return "iconst_2";
    case op::iconst_3:
      return "iconst_3";
    case op::iconst_4:
      return "iconst_4";
    case op::iconst_5:
      return "iconst_5";
    case op::idiv:
      return "idiv";
    case op::if_acmpeq:
      return "if_acmpeq";
    case op::if_acmpne:
      return "if_acmpne";
    case op::if_icmpeq:
      return "if_icmpeq";
    case op::if_icmpne:
      return "if_icmpne";
    case op::if_icmplt:
      return "if_icmplt";
    case op::if_icmpge:
      return "if_icmpge";
    case op::if_icmpgt:
      return "if_icmpgt";
    case op::if_icmple:
      return "if_icmple";
    case op::ifeq:
      return "ifeq";
    case op::ifne:
      return "ifne";
    case op::iflt:
      return "iflt";
    case op::ifge:
      return "ifge";
    case op::ifgt:
      return "ifgt";
    case op::ifle:
      return "ifle";
    case op::ifnonnull:
      return "ifnonnull";
    case op::ifnull:
      return "ifnull";
    case op::iinc:
      return "iinc";
    case op::iload:
      return "iload";
    case op::iload_0:
      return "iload_0";
    case op::iload_1:
      return "iload_1";
    case op::iload_2:
      return "iload_2";
    case op::iload_3:
      return "iload_3";
    case op::imul:
      return "imul";
    case op::ineg:
      return "ineg";
    case op:: instanceof:
      return "instanceof";
    case op::invokedynamic:
      return "invokedynamic";
    case op::invokeinterface:
      return "invokeinterface";
    case op::invokespecial:
      return "invokespecial";
    case op::invokestatic:
      return "invokestatic";
    case op::invokevirtual:
      return "invokevirtual";
    case op::ior:
      return "ior";
    case op::irem:
      return "irem";
    case op::ireturn:
      return "ireturn";
    case op::ishl:
      return "ishl";
    case op::ishr:
      return "ishr";
    case op::istore:
      return "istore";
    case op::istore_0:
      return "istore_0";
    case op::istore_1:
      return "istore_1";
    case op::istore_2:
      return "istore_2";
    case op::istore_3:
      return "istore_3";
    case op::isub:
      return "isub";
    case op::iushr:
      return "iushr";
    case op::ixor:
      return "ixor";
    case op::jsr:
      return "jsr";
    case op::jsr_w:
      return "jsr_w";
    case op::l2d:
      return "l2d";
    case op::l2f:
      return "l2f";
    case op::l2i:
      return "l2i";
    case op::ladd:
      return "ladd";
    case op::laload:
      return "laload";
    case op::land:
      return "land";
    case op::lastore:
      return "lastore";
    case op::lcmp:
      return "lcmp";
    case op::lconst_0:
      return "lconst_0";
    case op::lconst_1:
      return "lconst_1";
    case op::ldc:
      return "ldc";
    case op::ldc_w:
      return "ldc_w";
    case op::ldc2_w:
      return "ldc2_w";
    case op::ldiv:
      return "ldiv";
    case op::lload:
      return "lload";
    case op::lload_0:
      return "lload_0";
    case op::lload_1:
      return "lload_1";
    case op::lload_2:
      return "lload_2";
    case op::lload_3:
      return "lload_3";
    case op::lmul:
      return "lmul";
    case op::lneg:
      return "lneg";
    case op::lookupswitch:
      return "lookupswitch";
    case op::lor:
      return "lor";
    case op::lrem:
      return "lrem";
    case op::lreturn:
      return "lreturn";
    case op::lshl:
      return "lshl";
    case op::lshr:
      return "lshr";
    case op::lstore:
      return "lstore";
    case op::lstore_0:
      return "lstore_0";
    case op::lstore_1:
      return "lstore_1";
    case op::lstore_2:
      return "lstore_2";
    case op::lstore_3:
      return "lstore_3";
    case op::lsub:
      return "lsub";
    case op::lushr:
      return "lushr";
    case op::lxor:
      return "lxor";
    case op::monitorenter:
      return "monitorenter";
    case op::monitorexit:
      return "monitorexit";
    case op::multianewarray:
      return "multianewarray";
    case op::new_:
      return "new";
    case op::newarray:
      return "newarray";
    case op::nop:
      return "nop";
    case op::pop:
      return "pop";
    case op::pop2:
      return "pop2";
    case op::putfield:
      return "putfield";
    case op::putstatic:
      return "putstatic";
    case op::ret:
      return "ret";
    case op::return_:
      return "return";
    case op::saload:
      return "saload";
    case op::sastore:
      return "sastore";
    case op::sipush:
      return "sipush";
    case op::swap:
      return "swap";
    case op::tableswitch:
      return "tableswitch";
    case op::wide:
      return "wide";
    case -1:
      return "label";
    default:
      return "unknown(" + std::to_string(opcode) + ")";
  }
}

std::string typepath_name(uint8_t path) {
  switch (path) {
    case typepath::array:
      return "array";
    case typepath::nested:
      return "nested";
    case typepath::wildcard:
      return "wildcard";
    case typepath::type_argument:
      return "type_argument";
    default:
      return "unknown(" + std::to_string(path) + ")";
  }
}
std::string reference_kind_name(uint8_t kind) {
  switch (kind) {
    case reference_kind::get_field:
      return "get_field";
    case reference_kind::get_static:
      return "get_static";
    case reference_kind::put_field:
      return "put_field";
    case reference_kind::put_static:
      return "put_static";
    case reference_kind::invoke_virtual:
      return "invoke_virtual";
    case reference_kind::invoke_static:
      return "invoke_static";
    case reference_kind::invoke_special:
      return "invoke_special";
    case reference_kind::new_invoke_special:
      return "new_invoke_special";
    case reference_kind::invoke_interface:
      return "invoke_interface";
    default:
      return "unknown(" + std::to_string(kind) + ")";
  }
}
std::string array_name(uint8_t type) {
  switch (type) {
    case array::t_boolean:
      return "boolean";
    case array::t_char:
      return "char";
    case array::t_float:
      return "float";
    case array::t_double:
      return "double";
    case array::t_byte:
      return "byte";
    case array::t_short:
      return "short";
    case array::t_int:
      return "int";
    case array::t_long:
      return "long";
    default:
      return "unknown(" + std::to_string(type) + ")";
  }
}

} // namespace cafe
